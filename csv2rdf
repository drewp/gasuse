#!/usr/bin/python

import csv
from itertools import islice
import optparse
from rdflib import Graph
from rdflib import URIRef, Literal, BNode, Namespace
from rdflib import RDF, RDFS

GAS = Namespace("http://bigasterisk.com/gasuse/")

# should be standard datatypes:
DOLLAR = "dollar"
MILE = "mile"
GALLON = "gallon"

def newURI(store, base):
    """find an unused uri with a name like base1 base2, etc"""
    suffix = ""
    while 1:
        uri = URIRef("%s%s" % (base, suffix))
        if not list(store.predicate_objects(uri)):
            break
        if suffix == "":
            suffix = 1
        else:
            suffix = suffix + 1
    return URIRef("%s%s" % (base, suffix))

def addStation(store, shortName, shortAddress):
    # should be sparql
    matchname = list(store.subjects(GAS['shortName'], Literal(shortName)))
    matchaddr = list(store.subjects(GAS['shortAddress'],Literal(shortAddress)))
    station = None
    for s in matchname:
        if s in matchaddr:
            if station is not None:
                raise ValueError(
                    "found multiple stations with same name and address")
            station = s
    
    if station is not None:
        return station

    station = newURI(store, GAS['station/' + shortName.replace(' ','')])
    for p,o in [
        (GAS['shortName'], Literal(shortName)),
        (GAS['shortAddress'], Literal(shortAddress)),
        (RDFS.label, Literal("%s at %s" % (shortName, shortAddress)))]:
        store.add((station, p, o))
    return station    

parser = optparse.OptionParser(usage="""%prog input.csv
First row will be treated as headers.""")
parser.add_option("--headerns",help="namespace for headers")
opts, args = parser.parse_args()
if len(args)<1:
    parser.error("You need a file")

store = Graph()
dialect = csv.Sniffer().sniff("\n".join(list(islice(open(args[0]), 10))))

reader = csv.reader(open(args[0]), dialect)
headers = reader.next()
for row in reader:
    record = dict(zip(headers, [unicode(f, "latin") for f in row]))

    if record["gallons (+adj)"] == "":
        continue

    time = Literal("%s-%s-%s" % (record["date"][6:10], record["date"][:2],
                                 record["date"][3:5]))

    station = addStation(store, record["station"], record["addr"])

    gasPrice = BNode()
    for p, o in [ 
        (GAS['time'], time),
        (GAS['pricePerGallon'], Literal(record["price gal"], datatype=DOLLAR)),
        (GAS['gasStation'], station),
        ]:
        store.add((gasPrice, p, o))
    
    fillUp = BNode()
    for p,o in [
        (RDFS.Class, GAS['fillUp']),
        (GAS['time'], time),
        (GAS['notes'], Literal(record["notes"])),
        (GAS['gallons'], Literal(record["gallons (+adj)"], datatype=GALLON)),
        (GAS['fee'], Literal(record["fee"], datatype=DOLLAR)),
        (GAS['tripMeter'], Literal(record["miles (+adjs)"], datatype=MILE)),
        (GAS['odometer'], Literal(record["mileage"], datatype=MILE)),
        (GAS['gasStation'], station),
        (GAS['gasPrice'], gasPrice),
        (GAS['car'], GAS['car/drewHonda']),
        ]:
        if isinstance(o, basestring) and o == "":
            continue
        store.add((fillUp, p, o))

store.save("gas.rdf", format="pretty-xml")
