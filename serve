from __future__ import division
from twisted.application import internet, service
from nevow import appserver
from nevow import inevow, loaders, rend, static, url, tags as T
from rdflib.sparql.sparqlGraph import SPARQLGraph as Graph
from rdflib import URIRef, Literal, BNode, Namespace, FileInputSource
from rdflib import RDF, RDFS

import mpg
from gasuse import DC, DATE, GAS, DOLLAR, MILE, GALLON

class MainPage(rend.Page):
    docFactory = loaders.xmlfile("fillUps.html")
    addSlash = True
    def render_car(self, ctx, data):
        return car
    def data_numFillUps(self, ctx, data):
        args = inevow.IRequest(ctx).args
        try:
            return int(args.get('numFillUps', [10]))[0]
        except (TypeError, ValueError):
            return 10
    def data_fillUps(self, ctx, data):
        fillUps = [f for d,f in mpg.fillUps(graph, car)]
        fillUps = fillUps[-self.data_numFillUps(ctx, data):]
        return fillUps
    def render_numFillupsSelector(self, ctx, data):
        # 'all 165'
        return (T.a(href=url.here.add('numFillUps', 55))["55"],
                T.a(href=url.here.add('numFillUps', 10))["10"])
    def render_row(self, ctx, item):
        val = graph.value
        slot = ctx.fillSlots
        for p in [
            "http://purl.org/dc/elements/1.1/date",
            "http://bigasterisk.com/2005/11/gasuse/gallons" ,
            "http://bigasterisk.com/2005/11/gasuse/gasPrice" ,
            "http://bigasterisk.com/2005/11/gasuse/gasStation" ,
            "http://bigasterisk.com/2005/11/gasuse/tripMeter" ,
            "http://bigasterisk.com/2005/11/gasuse/milesOnThisTank" ,
            "http://bigasterisk.com/2005/11/gasuse/mpgOnThisTank" ,
            "http://bigasterisk.com/2005/11/gasuse/notes" ,
            "http://bigasterisk.com/2005/11/gasuse/odometer" ,
            "mpgColor", "pricePerGallon", "gasStationLabel",
            "dpmColor", "dollarsPerMile", "mpgTrunc"]:
            slot(p, "")
 
        for p,o in graph.predicate_objects(item):
            slot(p, str(o))

        try:
            slot("mpgTrunc", "%.2f" % float(val(item, GAS["mpgOnThisTank"])))
        except (TypeError, ValueError):
            pass

        if val(item, GAS["mpgOnThisTank"]) is not None:
            m = float(val(item, GAS["mpgOnThisTank"]))
            bright = max(0, min(255, (m - 15) / (35 - 15) * 255))
            slot("mpgColor", "#%02X%02X%02X" % (50, bright, 50))
        try:
            slot("pricePerGallon",
                 val(val(item, GAS["gasPrice"]), GAS["pricePerGallon"]))
        except (TypeError, ValueError):         pass
        try:
            slot("gasStationLabel",
                 val(val(item, GAS["gasStation"]), RDFS.label))
        except (TypeError, ValueError):         pass
        try:
            dpm = float(val(val(item, GAS["gasPrice"]),
                            GAS["pricePerGallon"])) / float(val(item,
                                                        GAS["mpgOnThisTank"]))
            slot("dollarsPerMile", "%.04f" % dpm)
            bright = max(0, min(255, (dpm - .04) / (.10 - .04) * 255))
            slot("dpmColor", "#%02X%02X%02X" % (bright,150,150))
        except (TypeError, ValueError), e:
            pass

            
        return ctx.tag

graph = Graph()
graph.parse(FileInputSource(open("gas.rdf")))

car = GAS['car/drewHonda']

mpg.calcMpg(graph, car)

application = service.Application('gasuse')
webServer = internet.TCPServer(8081, appserver.NevowSite(MainPage()))
webServer.setServiceParent(application)
