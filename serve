"""
todo:

sort station dpm by total dpm; hide stations with too little data

svg graphs of stuff

map of station positions and avg prices

histogram of dollars per mile (by number of miles at that price)
"""

from __future__ import division
import math, time, sys, logging

sys.path.append('/usr/lib/python%s/site-packages/oldxml' % sys.version[:3])

from sets import Set
from xml.utils import iso8601
from twisted.application import internet, service
from nevow import appserver
from nevow import inevow, loaders, rend, static, url, tags as T, guard
from nevow.vhost import VHostMonsterResource
from formless import annotate, webform
from zope.interface import implements
from rdflib.sparql.sparqlGraph import SPARQLGraph
from rdflib import URIRef, Literal, Namespace, FileInputSource
from rdflib.Graph import Graph, ConjunctiveGraph
from rdflib import RDF, RDFS
from rdflib.sparql.sparqlOperators import getLiteralValue
from linegraph import LineGraph
import mpg
from gasuse import DC, DATE, GAS, DOLLAR, MILE, GALLON, SIOC

sys.path.append("/my/proj/sparqlhttp")
sys.path.append("../sparqlhttp")
from sparqlhttp.syncimport import SyncImport
from sparqlhttp.graph2 import SyncGraph

XS = Namespace("http://www.w3.org/2001/XMLSchema#")

dlit = lambda d: Literal(d, datatype='http://www.w3.org/2001/XMLSchema#date')

class Page(rend.Page):
    docFactory = loaders.xmlfile("basic.html")
    content = "" # xml file to appear in center frame
    def render_content(self, context, data):
        return loaders.xmlfile(self.content)

def randomNode():
    """not using bnodes, but these are about the same"""
    return URIRef("http://bigasterisk.com/2005/11/gasuse/node/%f" % time.time())

def stationUri(existingGraph, newGraph, station, addr):
    """
    station like "chevon"
    addr like "foothill SL"
    """
    s = GAS['station/hash%s' % hash(station + addr)]
    typeStmt = (s, RDF.type, GAS['Station'])
    if typeStmt not in existingGraph:
        newGraph.add(typeStmt)
        if addr:
            newGraph.add((s, GAS['shortAddress'], Literal(addr)))
        if station:
            newGraph.add((s, GAS['shortName'], Literal(station)))
        if addr or station:
            newGraph.add((s, RDFS.label,
                          Literal("%s near %s" % (station, addr))))
    return s

class SubmitFillUpPage(rend.Page):
    docFactory = loaders.xmlfile("submit.html")

    def renderHTTP(self, ctx):
        if inevow.IRequest(ctx).method == 'POST':
            return self.newItem(ctx)
        
        return rend.Page.renderHTTP(self, ctx)

    def render_loggedIn(self, ctx, data):
        req = inevow.IRequest(ctx)
        user = req.getHeader('x-foaf-agent')
        if user is None:
            return T.a(href="login")['Login required']
        return [T.div(id="login")["Logged in as ", user or 'unknown'], ctx.tag]
            
    def newItem(self, ctx):
        date, station, addr, priceGal, car, gallons, fee, odo, notes = [
          ctx.arg(x) for x in
          "date station addr priceGal car gallons fee odo notes".split()]

        req = inevow.IRequest(ctx)
        user = req.getHeader('x-foaf-agent')
        if user is None:
            raise ValueError("not logged in")
        
        g = Graph()

        if date == 'today':
            date = time.strftime("%Y-%m-%d")
        date = Literal(date, datatype=XS['date'])

        station = stationUri(graph, g, station, addr)

        price = randomNode()
        g.add((price, GAS['gasStation'], station))
        g.add((price, GAS['pricePerGallon'],
               Literal(priceGal, datatype=GAS['type#dollar'])))
        g.add((price, DC['date'], date))

        fill = randomNode()
        g.add((fill, RDF.type, GAS['FillUp']))
        g.add((fill, SIOC.has_creator, URIRef(user)))
        g.add((fill, DC['created'],
               Literal(iso8601.tostring(time.time(), timezone=time.altzone))))
        g.add((fill, DC['date'], date))
        for s, o in dict(car=URIRef(car),
                         gallons=Literal(gallons, datatype=GAS['type#gallon']),
                         gasPrice=price,
                         gasStation=station,
                         odometer=Literal(odo, datatype=GAS['type#mile']),
                         notes=Literal(notes),
                         ).items():
            if o:
                g.add((fill, GAS[s], o))        

        outFilename = "input/web_added-%s.nt" % time.time()
        g.serialize(outFilename, format="nt")
        return static.staticHTML("saved to %s" % outFilename)

def htmlColor(r,g,b):
    clamp = lambda v: max(0, min(255, v))
    return "#%02X%02X%02X" % (clamp(r), clamp(g), clamp(b))

class FillupsPage(Page):
    content = "fillUps.html"
    addSlash = True
    def render_car(self, ctx, data):
        args = inevow.IRequest(ctx).args
        if 'car' in args:
            return GAS['car/%s' % args['car'][0]]
        return GAS['car/drewCivicHybrid']
    def data_numFillUps(self, ctx, data):
        args = inevow.IRequest(ctx).args
        try:
            n = args['numFillUps'][0]
            if n == 'all':
                return 'all'
            return int(n)
        except (KeyError, TypeError, ValueError), e:
            return 10
    def data_fillUps(self, ctx, data):
        reload(mpg)
        fillUps = [f for d,f in mpg.fillUps(graph2, self.render_car(ctx, data))]
        n = self.data_numFillUps(ctx, data)
        if n == 'all':
            n = 0
        fillUps = fillUps[-n:]
        return fillUps
    def render_numFillupsSelector(self, ctx, data):
        # 'all 165'
        return [(T.a(href=url.here.add('numFillUps', n))[n]," ")
                for n in [10,20,50,100,'all']]
    def render_row(self, ctx, item):
        val = lambda *args: str(graph2.value(*args))
        slot = ctx.fillSlots
        for p in [
            "http://purl.org/dc/elements/1.1/date",
            "http://bigasterisk.com/2005/11/gasuse/gallons" ,
            "http://bigasterisk.com/2005/11/gasuse/gasPrice" ,
            "http://bigasterisk.com/2005/11/gasuse/tripMeter" ,
            "http://bigasterisk.com/2005/11/gasuse/milesOnThisTank" ,
            "http://bigasterisk.com/2005/11/gasuse/notes" ,
            "http://bigasterisk.com/2005/11/gasuse/odometer" ,
            "mpgColor", "pricePerGallon", "gasStationLabel",
            "dpmColor", "dollarsPerMile", "mpgTrunc"]:
            slot(p, "")

        for row in graph2.queryd("SELECT ?p ?o WHERE { ?s ?p ?o }",
                                 initBindings={'s' : item}):
            slot(str(row['p']), str(row['o']))

        def tryRound(x, width=2):
            try:
                return ("%."+str(width)+"f") % float(x)
            except (TypeError, ValueError), e:
                return x

        slot("mpgTrunc", tryRound(val(item, GAS["mpgOnThisTank"])))

        if val(item, GAS["mpgOnThisTank"]) != "None": # val has str()
            m = float(val(item, GAS["mpgOnThisTank"]))
            bright = (m - 15) / (55 - 15) * 255
            slot("mpgColor", htmlColor(50, bright, 50))

        slot("pricePerGallon",
             tryRound(graph2.queryd("""
               SELECT ?ppg WHERE {
                 ?item gas:gasPrice [
                   gas:pricePerGallon ?ppg ]
               }""", initBindings={'item' : item})[0]['ppg'], width=3))

        try:
            slot("gasStationLabel", [row['label'] for row in graph2.queryd("""
              SELECT ?label WHERE {
                ?item gas:gasStation ?stn .
                ?stn rdfs:label ?label .
              }
            """, initBindings={'item' : item})])
        except (TypeError, ValueError), e:
            print e
            pass

        try:
            dpm = float(val(item, GAS['dollarsPerMile']))
            slot("dollarsPerMile", "%.04f" % dpm)
            bright = (dpm - .03) / (.10 - .03) * 255
            slot("dpmColor", htmlColor(bright, 150, 150))
        except (TypeError, ValueError), e:
            print e
            pass
            
        return ctx.tag

    def fillUpsByShortName(self, car, shortName):
        if not hasattr(self, "_fbsn"):
            self._fbsn = {}
        if shortName not in self._fbsn:
            val = graph2.value
            fillUps = Set([row['fillUp'] for row in graph2.queryd("""
              SELECT DISTINCT ?fillUp WHERE {
                ?stn a gas:Station ;
                  gas:shortName ?shortName .
                ?fill a gas:Fillup ;
                  gas:car ?car ;
                  gas:gasStation ?stn .
              }
            """, initBindings={'shortName' : Literal(shortName),
                               'car' : car})])
            self._fbsn[shortName] = fillUps
            
        return self._fbsn[shortName]
        
    def dpmInDateRange(self, car, shortName, start, end):
        print " ", car, shortName, start, end
        milesFromStn = 0
        dollarsFromStn = 0
        totalGal = 0
        val = graph2.value
        for f in self.fillUpsByShortName(car, shortName):
            try:
                if not (getLiteralValue(start) <=
                        getLiteralValue(val(f, DC['date'])) <=
                        getLiteralValue(end)):
                    continue
                m = val(f, GAS['milesOnThisTank'])
                milesFromStn += float(m)
                g = val(f, GAS['gallons'])
                d = val(val(f, GAS['gasPrice']), GAS['pricePerGallon'])
                dollarsFromStn += float(g) * float(d)
                totalGal += float(g)
            except (TypeError, ValueError):
                pass
        try:
            dpm = dollarsFromStn / milesFromStn
        except ZeroDivisionError:
            dpm = 0
        return dpm, totalGal

    def data_years(self, ctx, data):
        return range(2001, 2009+1) + ['All']

    def data_stationDpmByYear(self, ctx, data):
        """
        [[u'http://bigasterisk.com/2005/11/gasuse/station/76',
        (0.066221231927710858, 25.367000000000001),
        (0.052104591261451727, 42.505000000000003),
        (0.065318293788819884, 55.646999999999998),
        (0.054380097008159559, 28.173000000000002),
        (0.080358870535714305, 13.746), (0.060841301868802447,
        165.43799999999999)],
        [u'http://bigasterisk.com/2005/11/gasuse/station/761',
        (0.066221231927710858, 25.367000000000001),
        (0.052104591261451727, 42.505000000000003),
        (0.065318293788819884, 55.646999999999998),
        (0.054380097008159559, 28.173000000000002),
        (0.080358870535714305, 13.746), (0.060841301868802447,
        165.43799999999999)], ...]       
        """
        ret = []
        print "shortnames"
        shortNames = Set([row['shortName'] for row in
                          graph2.queryd("SELECT ?shortName WHERE { ?stn a gas:Station ; gas:shortName ?shortName . }")])

        car = self.render_car(ctx, data)
        for shortName in sorted(shortNames):
            print "Shortname", shortName
            row = [shortName]
            for year in self.data_years(ctx, data)[::-1]:
                if year == 'All':
                    s,e = dlit("1970-01-01"), dlit("2038-01-01")
                else:
                    s,e = dlit("%s-01-01" % year), dlit("%s-12-31" % year)
                dpm, totalGal = self.dpmInDateRange(car, shortName, s, e)
                row.insert(1, (dpm, totalGal))
                
                if year == 'All':
                    if totalGal < self.data_minGallonsForStationDpm(ctx, data):
                        break
            else:
                ret.append(row)
        return ret

    def data_minGallonsForStationDpm(self, ctx, data):
        return 20
        
    def render_stationDpmCell(self, ctx, data):
        dpm, totalGal = data
        bright = (dpm - .05) / (.085 - .05) * 255
        if dpm != 0:
            ctx.fillSlots("dpm", "%.03f (%.1f gal)" % (dpm, totalGal))
            ctx.fillSlots("dpmColor", htmlColor(bright, 150, 150))
        else:
            ctx.fillSlots("dpm", "")
            ctx.fillSlots("dpmColor", "#333333")
        return ctx.tag

class LineGraphPage(Page):
    addSlash = True
    def __init__(self, fillUpFunc, label):
        self.fillUpFunc, self.label = fillUpFunc, label
        
    def render_content(self, context, data):
        return loaders.stan(T.html[T.body[
        T.p[self.label, " by fillup date"],
        T.Tag("embed")(src="graph", type="image/svg+xml",
                       width=850, height=260)
        ]])
    
    def child_graph(self, ctx):
        vals = []
        reload(mpg)
        for i, (date, f) in enumerate(mpg.fillUps(graph2, car)):
            try:
                # clean up the data- i should be able to screen for datatype
                if not date.startswith("200") or len(date) != 10:
                    continue
                
                v = self.fillUpFunc(f)
                if v is not None:
                    vals.append((date, float(v)))
            except ValueError:
                pass
        return LineGraph(vals)
    
    def locateChild(self, ctx, segments):
        print "locate", segments
        if segments[-1] == 'graph':
            return LineGraphPage(*self.funcDesc(segments[0])).child_graph(ctx), []
        if segments[0] == '':
            return LineGraphPage(self.fillUpFunc, self.label), []
        return LineGraphPage(*self.funcDesc(segments[0])), []
    
    def funcDesc(self, word):
        if word == 'dollarsPerMile':
            return (lambda fillUp: graph2.value(fillUp, GAS['dollarsPerMile']),
                    'dollarsPerMile')
        return (lambda fillUp: graph2.value(graph2.value(fillUp,
                                                      GAS['gasPrice']),
                                          GAS['pricePerGallon']),
                "pricePerGallon")

class MainPage(Page):
    content = "main.html"
    def child_fillUps(self, ctx):
        return FillupsPage()
    def child_lineGraph(self, ctx):
        return LineGraphPage(lambda fillUp: graph2.value(graph2.value(fillUp,
                                                            GAS['gasPrice']),
                                                        GAS['pricePerGallon']),
                             "pricePerGallon")
    def child_submitFillUp(self, ctx):
        return SubmitFillUpPage()

    def child_news(self, ctx):
        return static.File("wiki1.html")
    
setattr(MainPage, 'child_doap.rdf', static.File("doap.rdf"))
    
logging.basicConfig(level=logging.INFO)
log = logging.getLogger()
logging.getLogger('restkit.client').setLevel(logging.WARN)

graph2 = SyncGraph('sesame',
     'http://plus:8080/openrdf-sesame/repositories/gasuse',
                   initNs=dict(dc=DC, gas=GAS, rdfs=RDFS.RDFSNS))
sync = SyncImport(graph2, inputDirectory='input/',
                  contextPrefix="http://gasuse.bigasterisk.com/input/",
                  pollSeconds=8)

log.info("recomputing mpg")
mpg.clearComputed(graph2)
for car in [GAS['car/drewCivicHybrid'],
            #GAS['car/drewHonda'],
            ]:
    mpg.calcMpg(graph2, car)
log.info("done mpg")

application = service.Application('gasuse')
main = MainPage()
from nevow.vhost import VHostMonsterResource
main.putChild('vhost', VHostMonsterResource())

webServer = internet.TCPServer(8081, appserver.NevowSite((main)))
webServer.setServiceParent(application)
