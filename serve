from twisted.application import internet, service
from nevow import appserver
from nevow import loaders, rend, static, tags as T
from rdflib.sparql.sparqlGraph import SPARQLGraph as Graph
from rdflib import URIRef, Literal, BNode, Namespace, FileInputSource
from rdflib import RDF, RDFS

import mpg
from gasuse import DC, DATE, GAS, DOLLAR, MILE, GALLON

class MainPage(rend.Page):
    docFactory = loaders.htmlfile("fillUps.html")
    addSlash = True
    def render_car(self, ctx, data):
        return car
    def data_fillUps(self, ctx, data):
        return [f for d,f in mpg.fillUps(graph, car)]
    def render_row(self, ctx, item):
        for p in [
"http://purl.org/dc/elements/1.1/date",
"http://bigasterisk.com/2005/11/gasuse/gallons" ,
"http://bigasterisk.com/2005/11/gasuse/gasPrice" ,
"http://bigasterisk.com/2005/11/gasuse/gasStation" ,
"http://bigasterisk.com/2005/11/gasuse/tripMeter" ,
"http://bigasterisk.com/2005/11/gasuse/milesOnThisTank" ,
"http://bigasterisk.com/2005/11/gasuse/mpgOnThisTank" ,
"http://bigasterisk.com/2005/11/gasuse/notes" ,
"http://bigasterisk.com/2005/11/gasuse/odometer" ,
"coloredMpg", ]:
            ctx.fillSlots(p, "")
 
        for p,o in graph.predicate_objects(item):
            ctx.fillSlots(p, str(o))

        if graph.value(item, "http://bigasterisk.com/2005/11/gasuse/mpgOnThisTank") is not None:
            m = float(graph.value(item, "http://bigasterisk.com/2005/11/gasuse/mpgOnThisTank"))
            bright = max(0, min(255, m / 35 * 255))
            ctx.fillSlots("coloredMpg",
                          T.td(bgcolor="#%02X%02X%02X" % (50,
                                                          bright,
                                                          50))[str(m)])
        
            
        return ctx.tag

graph = Graph()
graph.parse(FileInputSource(open("gas.rdf")))


car = GAS['car/drewHonda']

mpg.calcMpg(graph, car)

application = service.Application('gasuse')
webServer = internet.TCPServer(8081, appserver.NevowSite(MainPage()))
webServer.setServiceParent(application)
